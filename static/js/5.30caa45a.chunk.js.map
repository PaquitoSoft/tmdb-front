{"version":3,"sources":["components/shared/use-api-client/use-api-client.js","components/shared/rating-icon/rating-icon.js","components/tvshow-detail/tvshow-detail-view.js"],"names":["useApiClient","query","params","apiClient","useAppContext","useState","isFetching","setIsFetching","data","setData","error","setError","paramsHash","btoa","JSON","stringify","useEffect","ignore","variables","then","result","errors","catch","RatingIcon","ratingValue","size","className","toFixed","sizes","SMALL","BIG","CharacterMiniCard","character","imagePath","name","actorName","mediaUrl","title","subtitle","SeasonMiniCard","season","tvShowId","posterPath","seasonNumber","airDate","episodesCount","to","VIEW_DATA_QUERY","TvShowDetailView","useParams","parseInt","getTvShowDetails","id","firstAirDate","overview","votesAverage","seasons","cast","src","alt","Date","toDateString","map","key"],"mappings":"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","file":"static/js/5.30caa45a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAppContext } from '../../app-context/app-context';\n\nexport default function useApiClient({\n\tquery, params = {}\n}) {\n\tconst { apiClient } = useAppContext();\n\tconst [isFetching, setIsFetching] = useState(true);\n\tconst [data, setData] = useState();\n\tconst [error, setError] = useState();\n\tconst paramsHash = btoa(JSON.stringify(params));\n\n\tuseEffect(() => {\n\t\tlet ignore = false;\n\t\tsetIsFetching(true);\n\t\tapiClient.query({ query, variables: params })\n\t\t.then(result => {\n\t\t\tif (ignore) return null;\n\n\t\t\tif (result.errors) {\n\t\t\t\tsetError(result.errors);\n\t\t\t} else {\n\t\t\t\tsetData(result.data);\n\t\t\t}\n\t\t\t\n\t\t\tsetIsFetching(false);\n\t\t})\n\t\t.catch(error => {\n\t\t\tsetError(error);\n\t\t\tsetIsFetching(false);\n\t\t});\n\n\t\treturn () => ignore = true;\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [paramsHash]);\n\n\treturn {\n\t\tisFetching,\n\t\tdata,\n\t\terror\n\t};\n}\n","import React from 'react';\n\nimport './rating-icon.css';\n\nfunction RatingIcon({ ratingValue, size = 'small', className = '' }) {\n\treturn (\n\t\t<span \n\t\t\tclassName={`rating-icon rating-icon--${size} ${className}`}\n\t\t>{ratingValue.toFixed(1)}</span>\n\t);\n}\n\nRatingIcon.sizes = {\n\tSMALL: 'small',\n\tBIG: 'big'\n};\n\nexport default RatingIcon;\n","import React from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport useApiClient from '../shared/use-api-client/use-api-client';\n\nimport MiniCard from '../shared/mini-card/mini-card';\nimport RatingIcon from '../shared/rating-icon/rating-icon';\n\nimport './tvshow-detail-view.css';\n\nfunction CharacterMiniCard({ character }) {\n\tconst {\n\t\timagePath,\n\t\tname,\n\t\tactorName\n\t} = character;\n\n\treturn (\n\t\t<MiniCard\n\t\t\tmediaUrl={`https://image.tmdb.org/t/p/w138_and_h175_face/${imagePath}`}\n\t\t\ttitle={actorName}\n\t\t\tsubtitle={name}\n\t\t/>\n\t);\n}\n\nfunction SeasonMiniCard({ season, tvShowId }) {\n\tconst {\n\t\tposterPath,\n\t\tseasonNumber,\n\t\tairDate,\n\t\tepisodesCount\n\t} = season;\n\n\treturn (\n\t\t<Link to={`/tvshow/${tvShowId}/season/${seasonNumber}`}>\n\t\t\t<MiniCard \n\t\t\t\tmediaUrl={`https://image.tmdb.org/t/p/w130_and_h195_bestv2${posterPath}`}\n\t\t\t\ttitle={`Season ${seasonNumber}`}\n\t\t\t\tsubtitle={<span>({airDate})<br/>{episodesCount} Episodes</span>}\n\t\t\t/>\n\t\t</Link>\n\t);\n}\n\nconst VIEW_DATA_QUERY = `\n\tquery TvShowDetails($tvShowId: Int!) {\n\t\tgetTvShowDetails(tvShowId: $tvShowId) {\n\t\t\tid\n\t\t\tname\n\t\t\tposterPath\n\t\t\tfirstAirDate\n\t\t\toverview\n\t\t\tvotesAverage\n\t\t\tseasons {\n\t\t\t\tseasonNumber\n\t\t\t\tposterPath\n\t\t\t\tairDate\n\t\t\t\tepisodesCount\n\t\t\t}\n\t\t\tcast {\n\t\t\t\tid\n\t\t\t\timagePath\n\t\t\t\tname\n\t\t\t\tactorName\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport default function TvShowDetailView() {\n\tconst { tvShowId } = useParams();\n\tconst {\n\t\tisFetching,\n\t\tdata,\n\t\terror\n\t} = useApiClient({\n\t\tquery: VIEW_DATA_QUERY,\n\t\tparams: { \n\t\t\ttvShowId: parseInt(tvShowId, 0)\n\t\t}\n\t});\n\t\n\tif (isFetching || error) return null;\n\t\n\tconst {\n\t\tid,\n\t\tname,\n\t\tposterPath,\n\t\tfirstAirDate,\n\t\toverview,\n\t\tvotesAverage,\n\t\tseasons = [],\n\t\tcast = []\n\t} = data.getTvShowDetails;\n\n\treturn (\n\t\t<section className=\"tvshow-detail\">\n\t\t\t<div className=\"tvshow-detail__main-info\">\n\t\t\t\t<section className=\"tvshow-detail__poster\">\n\t\t\t\t\t<img \n\t\t\t\t\t\tclassName=\"tvshow-detail__poster\" \n\t\t\t\t\t\tsrc={`https://image.tmdb.org/t/p/w300_and_h450_bestv2${posterPath}`} \n\t\t\t\t\t\talt={name}\n\t\t\t\t\t/>\n\t\t\t\t</section>\n\t\t\t\t<section className=\"tvshow-detail__info-container\">\n\t\t\t\t\t<div className=\"tvshow-detail__title\">\n\t\t\t\t\t\t<h1 className=\"tvshow-detail__name\">{name}</h1>\n\t\t\t\t\t\t<span className=\"tvshow-detail__year\">({(new Date(firstAirDate).toDateString())})</span>\n\t\t\t\t\t\t<RatingIcon \n\t\t\t\t\t\t\tclassName=\"tvshow-detail__rating\"\n\t\t\t\t\t\t\tratingValue={votesAverage}\n\t\t\t\t\t\t\tsize={RatingIcon.sizes.BIG}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<h2 className=\"tvshow-detail__overview-title\">Overview</h2>\n\t\t\t\t\t<p className=\"tvshow-detail__overview-description\">{overview}</p>\n\t\t\t\t</section>\n\t\t\t</div>\n\n\t\t\t<hr className=\"tvshow-detail__separator\"/>\n\n\t\t\t<section className=\"tvshow-detail__cast\">\n\t\t\t\t<h2 className=\"tvshow-detail__cast-title\">Tv Show Cast</h2>\n\t\t\t\t<div className=\"tvshow-detail__characters\">\n\t\t\t\t\t{cast.map(character => (\n\t\t\t\t\t\t<CharacterMiniCard key={character.id} character={character} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</section>\n\n\t\t\t<hr className=\"tvshow-detail__separator\"/>\n\n\t\t\t<section className=\"tvshow-detail__seasons-container\">\n\t\t\t\t<h2 className=\"tvshow-detail__seasons-title\">Seasons</h2>\n\t\t\t\t<div className=\"tvshow-detail__seasons-list\">\n\t\t\t\t\t{seasons.map(season => (\n\t\t\t\t\t\t<SeasonMiniCard key={season.seasonNumber} season={season} tvShowId={id} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t</section>\n\t)\n}\n"],"sourceRoot":""}