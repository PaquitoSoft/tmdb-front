{"version":3,"sources":["components/layout/layout-app.js","components/shared/scroll-to-top/scroll-to-top.js","App.js","serviceWorker.js","index.js"],"names":["LayoutApp","children","className","to","ScrollToTop","pathname","useLocation","useEffect","window","scroll","top","left","behavior","HomeView","lazy","TvShowDetailView","SeasonDetailView","basename","App","fallback","path","exact","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAKe,SAASA,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SACnC,OACC,kBAAC,WAAD,KACC,4BAAQC,UAAU,sBACjB,kBAAC,IAAD,CAAMA,UAAU,oBAAoBC,GAAG,KAAvC,uBAED,0BAAMD,UAAU,oBAAoBD,GACpC,4BAAQC,UAAU,wBCTN,SAASE,IAAe,IAC9BC,EAAaC,cAAbD,SAUR,OARAE,qBAAU,WACTC,OAAOC,OAAO,CACbC,IAAK,EACLC,KAAM,EACNC,SAAU,aAET,CAACP,IAEG,K,UCNFQ,EAAWC,gBAAK,kBAAM,gCACtBC,EAAmBD,gBAAK,kBAAM,gCAC9BE,EAAmBF,gBAAK,kBAAM,gCAEhCG,EAAW,IAEdA,EAAW,cA0BGC,MAvBf,WACC,OACC,kBAAC,IAAD,CAAQD,SAAUA,GACjB,kBAAC,WAAD,CAAUE,SAAU,4CACnB,kBAAC,EAAD,KACC,kBAACf,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,KAAK,0CACX,kBAACJ,EAAD,OAED,kBAAC,IAAD,CAAOI,KAAK,qBACX,kBAACL,EAAD,OAED,kBAAC,IAAD,CAAOK,KAAK,IAAIC,OAAK,GACpB,kBAACR,EAAD,YCnBYS,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a7684acd.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './layout-app.css';\n\nexport default function LayoutApp({ children }) {\n\treturn (\n\t\t<Fragment>\n\t\t\t<header className=\"layout-app__header\">\n\t\t\t\t<Link className=\"layout-app__title\" to=\"/\">THE MOVIE DATABASE</Link>\n\t\t\t</header>\n\t\t\t<main className=\"layout-app__main\">{children}</main>\n\t\t\t<footer className=\"layout-app__footer\"></footer>\n\t\t</Fragment>\n\t);\n}\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport default function ScrollToTop() {\n\tconst { pathname } = useLocation();\n\n\tuseEffect(() => {\n\t\twindow.scroll({\n\t\t\ttop: 0,\n\t\t\tleft: 0,\n\t\t\tbehavior: 'smooth'\n\t\t});\n\t}, [pathname]);\n\n\treturn null;\n}\n","import React, { Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Layout from './components/layout/layout-app';\nimport ScrollToTop from './components/shared/scroll-to-top/scroll-to-top';\n\nimport './App.css';\n\nconst HomeView = lazy(() => import('./components/home/home-view'));\nconst TvShowDetailView = lazy(() => import('./components/tvshow-detail/tvshow-detail-view'));\nconst SeasonDetailView = lazy(() => import('./components/season-detail/season-detail-view'));\n\nlet basename = '/';\nif (process.env.NODE_ENV === 'production') {\n\tbasename = '/tmdb-front';\n}\n\nfunction App() {\n\treturn (\n\t\t<Router basename={basename}>\n\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t<Layout>\n\t\t\t\t\t<ScrollToTop />\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/tvshow/:tvshowId/season/:seasonNumber\">\n\t\t\t\t\t\t\t\t<SeasonDetailView />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path=\"/tvshow/:tvshowId\">\n\t\t\t\t\t\t\t\t<TvShowDetailView />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path=\"/\" exact>\n\t\t\t\t\t\t\t\t<HomeView />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Layout>\n\t\t\t</Suspense>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}