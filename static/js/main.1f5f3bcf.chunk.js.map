{"version":3,"sources":["components/app-context/app-context.js","components/shared/mini-card/mini-card.js","components/layout/searcher/searcher.js","components/layout/layout-app.js","components/shared/scroll-to-top/scroll-to-top.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","apiClient","undefined","AppProvider","children","Provider","value","useAppContext","context","useContext","Error","MiniCard","mediaUrl","title","subtitle","className","src","alt","SearchResult","tvShow","onClick","to","id","backdropImagePath","name","Searcher","useState","hasFocus","setFocus","searchTerm","setSearchTerm","searchResults","setSearchResults","useEffect","document","addEventListener","event","target","closest","onSubmit","preventDefault","POPULAR_TVSHOWS_MOCK","type","placeholder","onFocus","onChange","length","map","result","key","LayoutApp","ScrollToTop","pathname","useLocation","window","scroll","top","left","behavior","HomeView","lazy","TvShowDetailView","SeasonDetailView","basename","App","fallback","path","exact","Boolean","location","hostname","match","ReactDOM","render","apiUrl","FetchQL","url","interceptors","headers","onStart","requestQueueLength","onEnd","omitEmptyVariables","buildApiClient","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f5f3bcf.chunk.js","sourcesContent":["import React, { useContext } from 'react';\n\nconst AppContext = React.createContext({\n\tapiClient: undefined\n});\n\nexport function AppProvider({ apiClient, children } ) {\n\treturn (\n\t\t<AppContext.Provider value={{ apiClient }}>\n\t\t\t{children}\n\t\t</AppContext.Provider>\n\t);\n}\n\nexport function useAppContext() {\n\tconst context = useContext(AppContext);\n\tif (!context) {\n\t\tthrow new Error('useAppContext must be used within an AppContext.Provider')\n\t}\n\treturn context;\n}\n","import React from 'react';\n\nimport './mini-card.css';\n\nexport default function MiniCard({ mediaUrl, title, subtitle, className = '' }) {\n\treturn (\n\t\t<div className={`mini-card ${className}`}>\n\t\t\t<img className=\"mini-card__media\" src={mediaUrl} alt={title}/>\n\t\t\t<span className=\"mini-card__title\">{title}</span>\n\t\t\t<span className=\"mini-card__subtitle\">{subtitle}</span>\n\t\t</div>\n\t);\n\t\n}\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport MiniCard from '../../shared/mini-card/mini-card';\n\nimport POPULAR_TVSHOWS_MOCK from '../../../fixtures/popular-tvshows.json';\n\nimport './searcher.css';\n\nfunction SearchResult({ tvShow, onClick }) {\n\treturn (\n\t\t<Link to={`/tvshow/${tvShow.id}`} onClick={onClick}>\n\t\t\t<MiniCard\n\t\t\t\tclassName=\"searcher__result\"\n\t\t\t\tmediaUrl={`https://image.tmdb.org/t/p/w130_and_h195_bestv2${tvShow.backdropImagePath}`} \n\t\t\t\ttitle={tvShow.name} \n\t\t\t/>\n\t\t</Link>\n\t);\n}\n\nexport default function Searcher() {\n\tconst [hasFocus, setFocus] = useState(false);\n\tconst [searchTerm, setSearchTerm] = useState('');\n\tconst [searchResults, setSearchResults] = useState([]);\n\n\tconst onSubmit = (event) => {\n\t\tevent.preventDefault();\n\n\t\tif (searchTerm) {\n\t\t\tsetSearchResults(POPULAR_TVSHOWS_MOCK);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tdocument.addEventListener('click', event => {\n\t\t\tconst $searcher = event.target.closest('.searcher');\n\t\t\tif (!$searcher) {\n\t\t\t\tsetFocus(false);\n\t\t\t}\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<div className=\"searcher\">\n\t\t\t<form onSubmit={onSubmit}>\n\t\t\t\t<input \n\t\t\t\t\tclassName=\"searcher__search-term\" \n\t\t\t\t\ttype=\"text\" \n\t\t\t\t\tname=\"searchTerm\" \n\t\t\t\t\tplaceholder=\"Type in your search term\" \n\t\t\t\t\tonFocus={() => setFocus(true)}\n\t\t\t\t\tvalue={searchTerm}\n\t\t\t\t\tonChange={event => setSearchTerm(event.target.value)}\n\t\t\t\t/>\n\t\t\t</form>\n\t\t\t{hasFocus && searchResults.length > 0 && \n\t\t\t\t<div className=\"searcher__results\">\n\t\t\t\t\t{searchResults.map(result => \n\t\t\t\t\t\t<SearchResult \n\t\t\t\t\t\t\tkey={result.id} \n\t\t\t\t\t\t\ttvShow={result} \n\t\t\t\t\t\t\tonClick={() => setSearchResults([])}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t}\n\t\t</div>\n\t);\n}\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Searcher from './searcher/searcher';\n\nimport './layout-app.css';\n\nexport default function LayoutApp({ children }) {\n\treturn (\n\t\t<Fragment>\n\t\t\t<header className=\"layout-app__header\">\n\t\t\t\t<section className=\"layout-app__title-container\">\n\t\t\t\t\t<Link className=\"layout-app__title\" to=\"/\">THE MOVIE DATABASE</Link>\n\t\t\t\t</section>\n\t\t\t\t<section className=\"layout-app__search-container\">\n\t\t\t\t\t<Searcher />\n\t\t\t\t</section>\n\t\t\t</header>\n\t\t\t<main className=\"layout-app__main\">{children}</main>\n\t\t\t<footer className=\"layout-app__footer\"></footer>\n\t\t</Fragment>\n\t);\n}\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport default function ScrollToTop() {\n\tconst { pathname } = useLocation();\n\n\tuseEffect(() => {\n\t\twindow.scroll({\n\t\t\ttop: 0,\n\t\t\tleft: 0,\n\t\t\tbehavior: 'smooth'\n\t\t});\n\t}, [pathname]);\n\n\treturn null;\n}\n","import React, { Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport { AppProvider } from './components/app-context/app-context';\nimport Layout from './components/layout/layout-app';\nimport ScrollToTop from './components/shared/scroll-to-top/scroll-to-top';\n\nimport './App.css';\n\nconst HomeView = lazy(() => import('./components/home/home-view'));\nconst TvShowDetailView = lazy(() => import('./components/tvshow-detail/tvshow-detail-view'));\nconst SeasonDetailView = lazy(() => import('./components/season-detail/season-detail-view'));\n\nlet basename = '/';\nif (process.env.NODE_ENV === 'production') {\n\tbasename = '/tmdb-front';\n}\n\nfunction App({ apiClient }) {\n\treturn (\n\t\t<AppProvider apiClient={apiClient}>\n\t\t\t<Router basename={basename}>\n\t\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t\t<Layout>\n\t\t\t\t\t\t<ScrollToTop />\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t\t<Route path=\"/tvshow/:tvShowId/season/:seasonNumber\">\n\t\t\t\t\t\t\t\t\t<SeasonDetailView />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route path=\"/tvshow/:tvShowId\">\n\t\t\t\t\t\t\t\t\t<TvShowDetailView />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route path=\"/\" exact>\n\t\t\t\t\t\t\t\t\t<HomeView />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Layout>\n\t\t\t\t</Suspense>\n\t\t\t</Router>\n\t\t</AppProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport FetchQL from 'fetchql';\n\n// TODO Read from configuration\n//const API_URL = 'https://tmdb-graphql-api.herokuapp.com';\nconst API_URL = 'http://localhost:4000';\n\nfunction buildApiClient({ apiUrl }) {\n\treturn new FetchQL({\n\t\turl: apiUrl, // GraphQL server address\n\t\tinterceptors: [],\n\t\theaders: {}, // customized headers of all requests,\n\t\tonStart: function (requestQueueLength) {}, // callback of a new request queue\n\t\tonEnd: function (requestQueueLength) {}, // callback of a request queue finished\n\t\tomitEmptyVariables: false // remove null props(null or '') from the variables\n\t});\n}\n\nReactDOM.render(\n\t<App apiClient={buildApiClient({ apiUrl: API_URL })} />, \n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}