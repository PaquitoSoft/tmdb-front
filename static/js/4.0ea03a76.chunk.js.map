{"version":3,"sources":["components/shared/use-api-client/use-api-client.js","components/shared/rating-icon/rating-icon.js","components/season-detail/episode-card/episode-card.js","components/season-detail/season-detail-view.js"],"names":["useApiClient","query","params","apiClient","useAppContext","useState","isFetching","setIsFetching","data","setData","error","setError","paramsHash","btoa","JSON","stringify","useEffect","ignore","variables","then","result","errors","catch","RatingIcon","ratingValue","size","className","toFixed","sizes","SMALL","BIG","EpisodeCard","episode","name","episodeNumber","imagePath","airDate","voteAverage","overview","isOverviewAvailable","trim","length","isOverviewVisible","toggleOverviewVisibility","src","alt","Date","toDateString","onClick","viewDataQuery","SeasonDetailView","useParams","tvShowId","seasonNumber","parseInt","getSeasonDetails","episodes","tvShow","getTvShowDetails","map","key"],"mappings":"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","file":"static/js/4.0ea03a76.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAppContext } from '../../app-context/app-context';\n\nexport default function useApiClient({\n\tquery, params = {}\n}) {\n\tconst { apiClient } = useAppContext();\n\tconst [isFetching, setIsFetching] = useState(true);\n\tconst [data, setData] = useState();\n\tconst [error, setError] = useState();\n\tconst paramsHash = btoa(JSON.stringify(params));\n\n\tuseEffect(() => {\n\t\tlet ignore = false;\n\t\tsetIsFetching(true);\n\t\tapiClient.query({ query, variables: params })\n\t\t.then(result => {\n\t\t\tif (ignore) return null;\n\n\t\t\tif (result.errors) {\n\t\t\t\tsetError(result.errors);\n\t\t\t} else {\n\t\t\t\tsetData(result.data);\n\t\t\t}\n\t\t\t\n\t\t\tsetIsFetching(false);\n\t\t})\n\t\t.catch(error => {\n\t\t\tsetError(error);\n\t\t\tsetIsFetching(false);\n\t\t});\n\n\t\treturn () => ignore = true;\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [paramsHash]);\n\n\treturn {\n\t\tisFetching,\n\t\tdata,\n\t\terror\n\t};\n}\n","import React from 'react';\n\nimport './rating-icon.css';\n\nfunction RatingIcon({ ratingValue, size = 'small', className = '' }) {\n\treturn (\n\t\t<span \n\t\t\tclassName={`rating-icon rating-icon--${size} ${className}`}\n\t\t>{ratingValue.toFixed(1)}</span>\n\t);\n}\n\nRatingIcon.sizes = {\n\tSMALL: 'small',\n\tBIG: 'big'\n};\n\nexport default RatingIcon;\n","import React, { useState } from 'react';\n\nimport './episode-card.css';\nimport RatingIcon from '../../shared/rating-icon/rating-icon';\n\nexport default function EpisodeCard({ episode }) {\n\tconst {\n\t\tname,\n\t\tepisodeNumber,\n\t\timagePath,\n\t\tairDate,\n\t\tvoteAverage,\n\t\toverview\n\t} = episode;\n\tconst isOverviewAvailable = overview.trim().length > 0;\n\tconst [isOverviewVisible, toggleOverviewVisibility] = useState(false);\n\t\n\treturn (\n\t\t<div className=\"episode-card\">\n\t\t\t<img src={`https://image.tmdb.org/t/p/w454_and_h254_bestv2${imagePath}`} alt={name} className=\"episode-card__media\"/>\n\t\t\t<div className=\"episode-card__info\">\n\t\t\t\t<div className=\"episode-card__row\">\n\t\t\t\t\t<div className=\"episode-card__title\">\n\t\t\t\t\t\t<span className=\"episode-card__number\">{episodeNumber}.&nbsp;</span>\n\t\t\t\t\t\t<span className=\"episode-card__name\">{name}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t{voteAverage > 0 && \n\t\t\t\t\t\t<RatingIcon className=\"episode-card__rating\" ratingValue={voteAverage} />\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"episode-card__row\">\n\t\t\t\t\t<span className=\"episode-card__date\">({(new Date(airDate).toDateString())})</span>\n\t\t\t\t\t{isOverviewAvailable &&\n\t\t\t\t\t\t<span \n\t\t\t\t\t\t\tclassName=\"episode-card__overview-link\"\n\t\t\t\t\t\t\tonClick={() => toggleOverviewVisibility(true)}\n\t\t\t\t\t\t>See overview</span>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{isOverviewVisible && \n\t\t\t\t<div \n\t\t\t\t\tclassName=\"episode-card__overview-panel\"\n\t\t\t\t\tonClick={() => toggleOverviewVisibility(false)}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"episode-card__overview-content\">\n\t\t\t\t\t\t{overview}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t}\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport useApiClient from '../shared/use-api-client/use-api-client';\nimport EpisodeCard from './episode-card/episode-card';\n\nimport './season-detail-view.css';\n\nconst viewDataQuery = `\n\tquery SeasonDetails($tvShowId: Int!, $seasonNumber: Int!) {\n\t\tgetSeasonDetails(tvShowId: $tvShowId, seasonNumber: $seasonNumber) {\n\t\t\tid\n\t\t\tname\n\t\t\tairDate\n\t\t\tepisodes {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tepisodeNumber\n\t\t\t\timagePath\n\t\t\t\tairDate\n\t\t\t\tvoteAverage\n\t\t\t\toverview\n\t\t\t}\n\t\t}\n\t\tgetTvShowDetails(tvShowId: $tvShowId) {\n\t\t\tid\n\t\t\tname\n\t\t}\n\t}\n`;\n\nexport default function SeasonDetailView() {\n\tconst { tvShowId, seasonNumber } = useParams();\n\tconst {\n\t\tisFetching,\n\t\tdata,\n\t\terror\n\t} = useApiClient({\n\t\tquery: viewDataQuery,\n\t\tparams: { \n\t\t\ttvShowId: parseInt(tvShowId, 0), \n\t\t\tseasonNumber: parseInt(seasonNumber, 0)\n\t\t}\n\t});\n\t\n\tif (isFetching || error) return null;\n\t\n\tconst {\n\t\tname,\n\t\tairDate,\n\t\tepisodes = []\n\t} = data.getSeasonDetails;\n\tconst tvShow = data.getTvShowDetails;\n\n\treturn (\n\t\t<section className=\"season-detail\">\n\t\t\t<header className=\"season-detail__header\">\n\t\t\t\t<h1 className=\"season-detail__season-name\">{name}</h1>\n\t\t\t\t<span className=\"season-detail__season-date\">({(new Date(airDate).toDateString())})</span>\n\t\t\t\t<span className=\"season-detail__tvshow-name\"><i>{tvShow.name}</i></span>\n\t\t\t</header>\n\t\t\t<section className=\"season-detail__episodes\">\n\t\t\t\t{episodes.map(episode => \n\t\t\t\t\t<EpisodeCard key={episode.episodeNumber} episode={episode} />\n\t\t\t\t)}\n\t\t\t</section>\n\t\t</section>\n\t)\n}\n"],"sourceRoot":""}